Classes:
========

Main:
- ApplicationListener or GdxTest

Low-level:
- Mesh: vertices of objects for the scene
- Shader: vertex shader and fragment shader to render the Mesh
 - ShaderProgram compiles the shader
- Mesh.render() will render using primitive GL type, e.g. GL10.GL_TRIANGLES
  - OpenGL ES 2.0 requires shaders for rendering
- FrameBufferObject: wraps OpenGL ES 2.0 frame buffer objects

Scene:
- Model
 - ModelInstance

Input:
- Gdx.input
- Gdx.input.setInputProcessor(new InputProcessor(){ ... })
- CameraInputController to control camera (is InputProcessor)
  
Rendering:
- Environment
 - Light
- PerspectiveCamera
- ModelBatch: render your ModelInstance objects
- SpriteBatch: render flat UI elements like HUD, score, etc.

Collision:
- Using distance:
  - get translations of both objects
  - check tr1.dst(tr2) < radius
- Use BoundingBox or Sphere:
  - Get bounding box: Model.calculateBoundingBox(bb).mul(myInstance.transform)
  - BoundingBox1.intersects(BoundingBox2)
  - Sphere1.overlaps(Sphere2)
- Touching screen to pick item:
  - camera.getPickRay() -> ray casting to determine which object is interacted with
  - check if true: Intersector.intersectRayBoundsFast(ray, BoundingBox)
- Bullet Physics: sophisticated collision detection  